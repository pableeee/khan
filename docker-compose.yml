version: "3.8"

services:
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    command: "migrate"
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres
    networks:
      - wildlife-services
    environment:
      - KHAN_POSTGRES_HOST=postgres
      - KHAN_POSTGRES_USER=postgres
      - KHAN_POSTGRES_PORT=5432
      - KHAN_POSTGRES_PASSWORD=123456
      - KHAN_MONGODB_COLLECTIONTEMPLATE=clans_%s
      - KHAN_MONGODB_ENABLED=true
      - KHAN_MONGODB_URL=mongo:27017
      - KHAN_MONGODB_DATABASENAME=mongodb
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail http://localhost/healthcheck || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3

  khan:
    build:
      context: .
      dockerfile: Dockerfile
    command: "start"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      migrate:
        condition: service_started
    links:
      - postgres
      - redis
      - elasticsearch
    networks:
      - wildlife-services
    ports:
      - "80:80"
    environment:
      - KHAN_POSTGRES_HOST=postgres
      - KHAN_POSTGRES_USER=postgres
      - KHAN_POSTGRES_PORT=5432
      - KHAN_POSTGRES_PASSWORD=123456
      - KHAN_REDIS_HOST=redis
      - KHAN_ELASTICSEARCH_HOST=elasticsearch
      - KHAN_MONGODB_COLLECTIONTEMPLATE=clans_%s
      - KHAN_MONGODB_ENABLED=true
      - KHAN_MONGODB_URL=mongo:27017
      - KHAN_MONGODB_DATABASENAME=mongodb
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail http://localhost/healthcheck || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3

  khan-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: "worker"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      migrate:
        condition: service_started
    links:
      - postgres
      - redis
      - elasticsearch
    networks:
      - wildlife-services
    ports:
      - "8080:8080"
    environment:
      - KHAN_POSTGRES_HOST=postgres
      - KHAN_POSTGRES_USER=postgres
      - KHAN_POSTGRES_PORT=5432
      - KHAN_POSTGRES_PASSWORD=123456
      - KHAN_REDIS_HOST=redis
      - KHAN_ELASTICSEARCH_HOST=elasticsearch
      - KHAN_MONGODB_COLLECTIONTEMPLATE=clans_%s
      - KHAN_MONGODB_ENABLED=true
      - KHAN_MONGODB_URL=mongo:27017
      - KHAN_MONGODB_DATABASENAME=mongodb

  postgres:
    image: postgres:12
    restart: always
    environment:
      - POSTGRES_PASSWORD=123456
      - POSTGRES_USER=postgres
      - POSTGRES_DB=khan
    ports:
      - "5432:5432"
    volumes:
      - ./docker-data/postgres:/var/lib/postgresql/data
    networks:
      - wildlife-services
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:4
    restart: always
    ports: 
      - "6379:6379"
    networks:
      - wildlife-services
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 30

  elasticsearch:
    image: elasticsearch:7.6.1
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - wildlife-services
    volumes:
      - ./docker-data/elasticsearch:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
        interval: 10s
        timeout: 30s
        retries: 3
  mongo:
    image: mongo:5
    container_name: tre_mongo
    ports:
      - "27017:27017"
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one
    ports:
      - "6831:6831/udp" # accepts jaeger.thrift over compact thrift protocol
      - "6832:6832/udp" # accepts jaeger.thrift over binary thrift protocol
      - "5778:5778/tcp" # serves configs
      - "16686:16686/tcp" # serves frontend
    restart: unless-stopped
    healthcheck:
      test: wget -O - --spider 'localhost:14269/'
      interval: 5s
      timeout: 5s
      retries: 10

networks:
  wildlife-services: 
